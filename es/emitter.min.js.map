{"version":3,"file":"emitter.min.js","sources":["../src/emitter/index.ts"],"sourcesContent":["/*\n * @Author: Huangjs\n * @Date: 2023-02-13 15:22:58\n * @LastEditors: Huangjs\n * @LastEditTime: 2023-09-14 09:46:11\n * @Description: ******\n */\n\ntype IEventHandler<E, T> = (event: E, type?: T) => boolean | void;\n\nexport default class EventEmitter<T extends string, E> {\n  events: {\n    [key in T]?: {\n      pool: Array<IEventHandler<E, T>>;\n      single: number;\n    };\n  } = {};\n  constructor() {\n    this.events = {};\n  }\n  one(type: T, handler: IEventHandler<E, T>, single?: boolean) {\n    const onceHandler =\n      typeof handler === 'function'\n        ? (...args: [E, T?]) => {\n            // 该事件只执行一次，执行完就解除事件\n            handler.apply(null, args);\n            this.off(type, onceHandler, single);\n          }\n        : handler;\n    this.on(type, onceHandler, single);\n  }\n  on(type: T, handler: IEventHandler<E, T>, single?: boolean) {\n    const events = this.events[type] || {\n      pool: [],\n      single: -1,\n    };\n    if (typeof handler === 'function') {\n      if (single) {\n        // 该事件只能注册一次，每次注册都会替换上次注册的，类似于dom属性事件赋值注册比如element.onclick = ()=>{}\n        if (events.single === -1) {\n          // 记录该单独事件在所有事件的位置\n          events.single = events.pool.push(handler) - 1;\n        } else {\n          events.pool[events.single] = handler;\n        }\n      } else {\n        // 该事件可以注册多次，执行时，会遍历全部事件全部执行，类似于dom的addEventListener\n        // 注册进去之前会检查是否有相同的处理程序，如果有，则不再添加（独立程序不参与）\n        let unregistered = true;\n        for (let i = 0, len = events.pool.length; i < len; i++) {\n          if (events.pool[i] === handler && i !== events.single) {\n            unregistered = false;\n            break;\n          }\n        }\n        if (unregistered) {\n          events.pool.push(handler);\n        }\n      }\n    } else if (single && events.single !== -1) {\n      // 需要把独立事件删除，相当于解绑独立事件\n      events.pool.splice(events.single, 1);\n      events.single = -1;\n    }\n    this.events[type] = events;\n  }\n  off(type?: T, handler?: IEventHandler<E, T>, single?: boolean) {\n    if (typeof type === 'undefined') {\n      // 没有type则删除全部事件\n      this.events = {};\n    } else if (typeof handler === 'undefined') {\n      // 删除type下的所有事件\n      delete this.events[type];\n    } else if (single) {\n      const events = this.events[type];\n      if (events && events.single !== -1) {\n        // 删除独立程序事件\n        events.pool.splice(events.single, 1);\n        events.single = -1;\n      }\n    } else {\n      const events = this.events[type];\n      if (events) {\n        // 检查并删除事件池内事件\n        for (let i = events.pool.length - 1; i >= 0; i--) {\n          if (events.pool[i] === handler && i !== events.single) {\n            events.pool.splice(i, 1);\n            // 因为相同事件只会有一个，所以删除后不需要再检查了\n            break;\n          }\n        }\n      }\n    }\n  }\n  emit(type: T, event: E) {\n    const events = this.events[type];\n    if (events) {\n      // 循环执行事件池里的事件\n      for (let i = 0, len = events.pool.length; i < len; i++) {\n        const handler = events.pool[i];\n        if (typeof handler === 'function') {\n          const immediatePropagation = handler.apply(null, [event, type]);\n          // 返回值为false，则阻止后于该事件注册的同类型事件触发\n          if (immediatePropagation === false) {\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n"],"names":["EventEmitter","constructor","this","events","one","type","handler","single","onceHandler","args","apply","off","on","pool","push","unregistered","i","len","length","splice","emit","event"],"mappings":"AAUe,MAAMA,EAOnBC,WAAAA,GAAcC,KANdC,OAKI,GAEFD,KAAKC,OAAS,EAChB,CACAC,GAAAA,CAAIC,EAASC,EAA8BC,GACzC,MAAMC,EACe,mBAAZF,EACH,IAAIG,KAEFH,EAAQI,MAAM,KAAMD,GACpBP,KAAKS,IAAIN,EAAMG,EAAaD,EAAO,EAErCD,EACNJ,KAAKU,GAAGP,EAAMG,EAAaD,EAC7B,CACAK,EAAAA,CAAGP,EAASC,EAA8BC,GACxC,MAAMJ,EAASD,KAAKC,OAAOE,IAAS,CAClCQ,KAAM,GACNN,QAAS,GAEX,GAAuB,mBAAZD,EACT,GAAIC,GAEqB,IAAnBJ,EAAOI,OAETJ,EAAOI,OAASJ,EAAOU,KAAKC,KAAKR,GAAW,EAE5CH,EAAOU,KAAKV,EAAOI,QAAUD,MAE1B,CAGL,IAAIS,GAAe,EACnB,IAAK,IAAIC,EAAI,EAAGC,EAAMd,EAAOU,KAAKK,OAAYD,EAAJD,EAASA,IACjD,GAAIb,EAAOU,KAAKG,KAAOV,GAAWU,IAAMb,EAAOI,OAAQ,CACrDQ,GAAe,EACf,KACF,CAEEA,GACFZ,EAAOU,KAAKC,KAAKR,EAErB,MACSC,IAA6B,IAAnBJ,EAAOI,SAE1BJ,EAAOU,KAAKM,OAAOhB,EAAOI,OAAQ,GAClCJ,EAAOI,QAAU,GAEnBL,KAAKC,OAAOE,GAAQF,CACtB,CACAQ,GAAAA,CAAIN,EAAUC,EAA+BC,GAC3C,QAAoB,IAATF,EAETH,KAAKC,OAAS,QACT,QAAuB,IAAZG,SAETJ,KAAKC,OAAOE,QACd,GAAIE,EAAQ,CACjB,MAAMJ,EAASD,KAAKC,OAAOE,GACvBF,IAA6B,IAAnBA,EAAOI,SAEnBJ,EAAOU,KAAKM,OAAOhB,EAAOI,OAAQ,GAClCJ,EAAOI,QAAU,EAErB,KAAO,CACL,MAAMJ,EAASD,KAAKC,OAAOE,GAC3B,GAAIF,EAEF,IAAK,IAAIa,EAAIb,EAAOU,KAAKK,OAAS,EAAGF,GAAK,EAAGA,IAC3C,GAAIb,EAAOU,KAAKG,KAAOV,GAAWU,IAAMb,EAAOI,OAAQ,CACrDJ,EAAOU,KAAKM,OAAOH,EAAG,GAEtB,KACF,CAGN,CACF,CACAI,IAAAA,CAAKf,EAASgB,GACZ,MAAMlB,EAASD,KAAKC,OAAOE,GAC3B,GAAIF,EAEF,IAAK,IAAIa,EAAI,EAAGC,EAAMd,EAAOU,KAAKK,OAAYD,EAAJD,EAASA,IAAK,CACtD,MAAMV,EAAUH,EAAOU,KAAKG,GAC5B,GAAuB,mBAAZV,EAAwB,CAGjC,IAA6B,IAFAA,EAAQI,KAAM,KAAOW,EAAOhB,GAGvD,KAEJ,CACF,CAEJ"}